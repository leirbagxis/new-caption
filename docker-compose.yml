version: '3.8'

services:
  # Serviço da aplicação Node.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    restart: always
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - BOT_TOKEN=${BOT_TOKEN}
      - REDIS_HOST=${REDIS_HOST}
      - OWNER_ID=${OWNER_ID}
      - WEBAPP_URL=${WEBAPP_URL}
      - APP_PORT=${APP_PORT}
      - BOT_VERSION=${BOT_VERSION}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./:/app
      - /app/node_modules
    networks:
      - app-network

  # Serviço do PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Serviço do Redis
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Serviço do Nginx
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: